{"version":3,"file":"BreakpointManager.js","sourceRoot":"","sources":["../lib/BreakpointManager.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { EventEmitter }  from 'events';\n\nexport interface Breakpoint {\n  lineNumber: number,\n  filePath: string,\n  marker: any\n}\n\nexport class BreakpointManager {\n\n  private breakpoints: Array<Breakpoint> = [];\n  public events: EventEmitter;\n\n  constructor () {\n    this.events = new EventEmitter();\n  }\n\n  public getBreakpoints (): Array<Breakpoint> {\n    return this.breakpoints;\n  }\n\n  public didAddBreakpoint (callback: Function) {\n    this.events.on('addBreakpoint', callback);\n  }\n\n  public didRemoveBreakpoint (callback: Function) {\n    this.events.on('removeBreakpoint', callback);\n  }\n\n  getHandler (editor) {\n    let sourceFile = editor.getPath()\n    return (e) => {\n      let element = e.target\n      if (element.classList.contains('line-number')) {\n        // toggle breakpoints\n        let lineNumber = Number(element.textContent)\n        let exists = this.getBreakpoint(sourceFile, lineNumber)\n        if (exists) {\n          this.removeBreakpoint(exists);\n        } else {\n          let range = [[lineNumber - 1, 0], [lineNumber - 1, 0]]\n          let marker = editor.markBufferRange(range)\n          let decorator = editor.decorateMarker(marker, {\n            type: 'line-number',\n            class: 'bugs-breakpoint'\n          })\n          this.addBreakpoint(marker, lineNumber, sourceFile)\n        }\n      }\n    }\n  }\n\n  getBreakpoint (filePath: String, lineNumber: Number): Breakpoint {\n    let index = this.breakpoints.findIndex((item) => {\n      return (item.filePath === filePath && item.lineNumber === lineNumber)\n    })\n    return this.breakpoints[index];\n  }\n\n  removeBreakpoint (breakpoint: Breakpoint): boolean {\n    let index = this.breakpoints.indexOf(breakpoint);\n    if(index != -1) {\n      this.events.emit('removeBreakpoint', breakpoint.filePath, breakpoint.lineNumber);\n      breakpoint.marker.destroy();\n    \tthis.breakpoints.splice(index, 1);\n      return true;\n    }\n    return false;\n  }\n\n  addBreakpoint (marker: any, lineNumber: number, filePath: string) {\n    this.events.emit('addBreakpoint', filePath, lineNumber);\n    let index = this.breakpoints.push({\n      lineNumber,\n      filePath,\n      marker\n    } as Breakpoint);\n  }\n}\n"]}