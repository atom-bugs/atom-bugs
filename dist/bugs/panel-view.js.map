{"version":3,"file":"panel-view.js","sourceRoot":"","sources":["../../lib/bugs/panel-view.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n\nimport { parse } from 'path';\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  createSelect,\n  createOption,\n  insertElement\n} from '../element/index';\n\nexport class BugsPanelView {\n  private element: HTMLElement;\n  private scheme: {\n    icon: HTMLElement,\n    name: Text,\n    plugin: any\n  };\n  private schemePath: {\n    select: HTMLElement,\n    name: Text\n  };\n  private selectPath: HTMLElement;\n  constructor () {\n    this.element = document.createElement('atom-bugs-panel');\n    // create schemes\n    this.scheme = {\n      icon: createIconFromPath(''),\n      name: createText(''),\n      plugin: null\n    };\n    // create scheme path\n    this.schemePath = {\n      name: createText('Current File'),\n      select: createSelect({\n        change: (e) => this.setPathName(e.target.value)\n      }, [])\n    }\n\n    // Icon\n    insertElement(this.element, createIcon('logo'))\n    // Run\n    insertElement(this.element, createButton({\n      click: () => {\n        // run\n        let currentPlugin = this.scheme.plugin;\n        console.log('run', currentPlugin)\n      }\n    },[\n      createIcon('run'),\n      createText('Run')\n    ]))\n    // Pause\n    insertElement(this.element, createButton({\n      click: () => {\n        // pause\n        let currentPlugin = this.scheme.plugin;\n        console.log('pause', currentPlugin)\n      }\n    },[\n      createIcon('stop')\n    ]))\n    // Scheme Buttons\n    insertElement(this.element, createGroupButtons([\n      createButton({\n        className: 'bugs-scheme'\n      }, [\n        createIcon('atom'),\n        this.schemePath.name,\n        this.schemePath.select,\n        createElement('div', {\n          className: 'bugs-scheme-arrow'\n        })\n      ]),\n      createButton({\n        click () {\n          // scheme editor\n          let panel = document.createElement('div');\n          atom.workspace.addModalPanel({\n            item: panel\n          })\n        }\n      }, [\n        this.scheme.icon,\n        this.scheme.name\n      ])\n    ]))\n  }\n  getSelectedSchemeName () {\n    return 'Node.js';\n  }\n  setScheme (plugin) {\n    // set element icon bg\n    this.scheme.icon.style.backgroundImage = `url(${plugin.iconPath})`;\n    // set element scheme name\n    this.scheme.name.nodeValue = ` ${plugin.name}`\n    // set current plugin reference\n    this.scheme.plugin = plugin;\n  }\n  public setPathName (name: string) {\n    let baseName = parse(name).base\n    this.schemePath.name.nodeValue = ` ${baseName}`\n  }\n  public setPaths (paths: Array<string>) {\n    // clear old list\n    this.schemePath.select.innerHTML = '';\n    // add new paths\n    paths.forEach((p: string, index: number) => {\n      // activate first\n      if (index === 0) {\n        this.setPathName(p)\n      }\n      // insert option to path select\n      insertElement(this.schemePath.select, createOption(parse(p).base, p))\n    })\n  }\n  public getElement () {\n    return this.element;\n  }\n  public destroy () {\n    this.element.remove();\n  }\n}\n"]}