{"version":3,"file":"panel-view.js","sourceRoot":"","sources":["../../lib/bugs/panel-view.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAEZ,OAAO,EACL,kBAAkB,EAClB,YAAY,EACZ,UAAU,EACV,kBAAkB,EAClB,UAAU,EACV,aAAa,EACb,aAAa,EACd,MAAM,kBAAkB,CAAC;AAE1B,MAAM;IAMJ;QACE,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,GAAG;YACnB,IAAI,EAAE,kBAAkB,CAAC,EAAE,CAAC;YAC5B,IAAI,EAAE,UAAU,CAAC,EAAE,CAAC;SACrB,CAAC;QAGF,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC,CAAA;QAE/C,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC;YACvC,KAAK;gBACH,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBAC1C,KAAK,CAAC,SAAS,GAAG,4BAA4B,CAAC;gBAC/C,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC;oBAC3B,IAAI,EAAE,KAAK;iBACZ,CAAC,CAAA;YACJ,CAAC;SACF,EAAC;YACA,UAAU,CAAC,KAAK,CAAC;YACjB,UAAU,CAAC,KAAK,CAAC;SAClB,CAAC,CAAC,CAAA;QAEH,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC;YACvC,UAAU,CAAC,MAAM,CAAC;SACnB,CAAC,CAAC,CAAA;QAEH,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC;YAC7C,YAAY,CAAC;gBACX,SAAS,EAAE,aAAa;aACzB,EAAE;gBACD,UAAU,CAAC,MAAM,CAAC;gBAClB,UAAU,CAAC,WAAW,CAAC;gBACvB,aAAa,CAAC,KAAK,EAAE;oBACnB,SAAS,EAAE,mBAAmB;iBAC/B,CAAC;aACH,CAAC;YACF,YAAY,CAAC;gBACX,IAAI,CAAC,aAAa,CAAC,IAAI;gBACvB,IAAI,CAAC,aAAa,CAAC,IAAI;aACxB,CAAC;SACH,CAAC,CAAC,CAAA;IACL,CAAC;IACD,qBAAqB;QACnB,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACD,SAAS,CAAE,MAAM;QACf,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,OAAO,MAAM,CAAC,QAAQ,GAAG,CAAC;QAC1E,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE,CAAA;IACvD,CAAC;IACD,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IACD,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IACxB,CAAC;CACF","sourcesContent":["'use babel';\n\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  insertElement\n} from '../element/index';\n\nexport class BugsPanelView {\n  private element: HTMLElement;\n  private currentScheme: {\n    icon: HTMLElement,\n    name: Text\n  };\n  constructor () {\n    this.element = document.createElement('atom-bugs-panel');\n    this.currentScheme = {\n      icon: createIconFromPath(''),\n      name: createText('')\n    };\n\n    // Icon\n    insertElement(this.element, createIcon('logo'))\n    // Run\n    insertElement(this.element, createButton({\n      click () {\n        let panel = document.createElement('div');\n        panel.innerHTML = '<div class=\"figure\"></div>';\n        atom.workspace.addModalPanel({\n          item: panel\n        })\n      }\n    },[\n      createIcon('run'),\n      createText('Run')\n    ]))\n    // Pause\n    insertElement(this.element, createButton([\n      createIcon('stop')\n    ]))\n    // Scheme Buttons\n    insertElement(this.element, createGroupButtons([\n      createButton({\n        className: 'bugs-scheme'\n      }, [\n        createIcon('atom'),\n        createText('atom-bugs'),\n        createElement('div', {\n          className: 'bugs-scheme-arrow'\n        })\n      ]),\n      createButton([\n        this.currentScheme.icon,\n        this.currentScheme.name\n      ])\n    ]))\n  }\n  getSelectedSchemeName () {\n    return 'Node.js';\n  }\n  setScheme (scheme) {\n    this.currentScheme.icon.style.backgroundImage = `url(${scheme.iconPath})`;\n    this.currentScheme.name.nodeValue = ` ${scheme.name}`\n  }\n  getElement () {\n    return this.element;\n  }\n  destroy () {\n    this.element.remove();\n  }\n}\n"]}