{"version":3,"file":"bugs.js","sourceRoot":"","sources":["../../lib/bugs/bugs.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAEZ,MAAM,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAEvC,MAAM;IAIJ;QAFQ,gBAAW,GAAe,EAAE,CAAC;IAErB,CAAC;IAEjB,OAAO;IAEP,CAAC;IAED,aAAa,CAAE,MAAW;QACxB,IAAI,UAAU,GAAG,MAAM,CAAC,OAAO,EAAE,CAAA;QACjC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,CAAC;YAC/C,IAAI,OAAO,GAAG,CAAC,CAAC,MAAM,CAAA;YACtB,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gBAE9C,IAAI,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;gBAC5C,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,UAAU,CAAC,CAAA;gBACvD,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;oBACX,MAAM,CAAC,MAAM,EAAE,CAAC;gBAClB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,KAAK,GAAG,CAAC,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,UAAU,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;oBACtD,IAAI,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAA;oBAC1C,IAAI,SAAS,GAAG,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE;wBAC5C,IAAI,EAAE,aAAa;wBACnB,KAAK,EAAE,iBAAiB;qBACzB,CAAC,CAAA;oBACF,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,CAAA;gBACpD,CAAC;YACH,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,aAAa,CAAE,QAAgB,EAAE,UAAkB;QACjD,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI;YAC1C,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,aAAa,CAAE,MAAW,EAAE,UAAkB,EAAE,QAAgB;QAC9D,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;YAChC,UAAU;YACV,QAAQ;YACR,MAAM;gBACJ,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;gBACrC,MAAM,CAAC,OAAO,EAAE,CAAA;YAClB,CAAC;SACF,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["'use babel';\n\nconst { TextEditor } = require('atom');\n\nexport class Bugs {\n\n  private breakpoints: Array<any> = [];\n  \n  constructor () {}\n\n  destroy () {\n\n  }\n\n  observeEditor (editor: any) {\n    let sourceFile = editor.getPath()\n    editor.editorElement.addEventListener('click', (e) => {\n      let element = e.target\n      if (element.classList.contains('line-number')) {\n        // toggle breakpoints\n        let lineNumber = Number(element.textContent)\n        let exists = this.getBreakpoint(sourceFile, lineNumber)\n        if (exists) {\n          exists.remove();\n        } else {\n          let range = [[lineNumber - 1, 0], [lineNumber - 1, 0]]\n          let marker = editor.markBufferRange(range)\n          let decorator = editor.decorateMarker(marker, {\n            type: 'line-number',\n            class: 'bugs-breakpoint'\n          })\n          this.addBreakpoint(marker, lineNumber, sourceFile)\n        }\n      }\n    })\n  }\n\n  getBreakpoint (filePath: String, lineNumber: Number) {\n    let index = this.breakpoints.findIndex((item) => {\n      return (item.filePath === filePath && item.lineNumber === lineNumber)\n    })\n    return this.breakpoints[index];\n  }\n\n  addBreakpoint (marker: any, lineNumber: Number, filePath: String) {\n    let self = this;\n    let index = this.breakpoints.push({\n      lineNumber,\n      filePath,\n      remove () {\n        self.breakpoints.splice(index - 1, 1)\n        marker.destroy()\n      }\n    });\n  }\n}\n"]}