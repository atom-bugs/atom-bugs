{"version":3,"file":"Client.js","sourceRoot":"","sources":["../lib/Client.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAeZ,MAAM;IACJ,YAAqB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;IAAG,CAAC;IAC7C,GAAG,CAAE,OAAe;QAClB,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IACD,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC;CACF;AAED,MAAM;IAEJ,YAAqB,SAAoB,EAC/B,WAAwB,EACxB,UAAsB,EACtB,iBAAoC;QAHzB,cAAS,GAAT,SAAS,CAAW;QAC/B,gBAAW,GAAX,WAAW,CAAa;QACxB,eAAU,GAAV,UAAU,CAAY;QACtB,sBAAiB,GAAjB,iBAAiB,CAAmB;QAC5C,IAAI,CAAC,OAAO,GAAG,IAAI,aAAa,CAAC,SAAS,CAAC,CAAC;IAC9C,CAAC;IACD,IAAI;QACF,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,aAAa,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC;IACD,GAAG;QACD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IACD,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjC,wDAAwD;IAC1D,CAAC;IACD,MAAM;QACJ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;IAClC,CAAC;IACD,cAAc;QACZ,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC;IACjD,CAAC;IACD,kBAAkB,CAAE,QAAgB,EAAE,UAAkB;QACtD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACnD,CAAC;IACD,aAAa,CAAE,KAAsB;QACnC,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IACD,cAAc,CAAE,MAAW,EAAE,KAAU;QACrC,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IACrD,CAAC;CACF","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport {\n  DebugView,\n  CallStackFrames,\n  ToolbarView,\n  EditorView\n} from './ui/index';\nimport { Breakpoint, BreakpointManager } from './BreakpointManager';\n\nexport class ClientConsole {\n  constructor (private debugView: DebugView) {}\n  log (message: string): void {\n    this.debugView.consoleCreateLine(message);\n  }\n  clear (): void {\n    this.debugView.consoleClear();\n  }\n}\n\nexport class Client {\n  public console: ClientConsole;\n  constructor (private debugView: DebugView,\n    private toolbarView: ToolbarView,\n    private editorView: EditorView,\n    private breakpointManager: BreakpointManager) {\n    this.console = new ClientConsole(debugView);\n  }\n  stop (): void {\n    this.debugView.togglePause(false);\n    this.toolbarView.toggleRun(true);\n    this.editorView.removeMarkers();\n    this.debugView.consoleClear();\n  }\n  run (): void {\n    this.toolbarView.toggleRun(false);\n  }\n  pause (): void {\n    this.debugView.togglePause(true);\n    // this.debugView.setPausedScript(filePath, lineNumber);\n  }\n  resume (): void {\n    this.debugView.togglePause(false);\n    this.debugView.callStackClear();\n  }\n  getBreakpoints (): Array<Breakpoint> {\n    return this.breakpointManager.getBreakpoints();\n  }\n  activateBreakpoint (filePath: string, lineNumber: number): void {\n    this.debugView.breakOnFile(filePath, lineNumber);\n  }\n  showCallStack (items: CallStackFrames) {\n    this.debugView.insertCallStackFromFrames(items);\n  }\n  showEvaluation (result: any, range: any) {\n    this.editorView.addEvaluationMarker(result, range);\n  }\n}\n"]}