{"version":3,"file":"main.js","sourceRoot":"","sources":["../lib/main.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAEZ,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AACpC,MAAM,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAmBhD,eAAe;IACb,aAAa,EAAE,IAAI;IACnB,IAAI,EAAE,IAAI;IACV,SAAS,EAAE,IAAI;IAEf,QAAQ,CAAE,KAAU;QAClB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;YAC1C,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YACrC,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAA;QACxC,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QAEpC,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAA;QACzC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QAEtC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;QAEnF,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,CAAC,MAAM;YACvC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC;gBAAC,MAAM,CAAA;YACpD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE;YACzD,iBAAiB,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE;SACtC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,kBAAkB;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;IACjC,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACtB,CAAC;IAED,KAAK;QAEH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IACvB,CAAC;CACF,CAAC","sourcesContent":["'use babel';\n\nimport { Bugs } from './bugs/index';\nconst { CompositeDisposable } = require('atom');\n\n// function delay(milliseconds: number) {\n//   return new Promise<void>(resolve => {\n//     setTimeout(resolve, milliseconds);\n//   });\n// }\n//\n// async function dramaticWelcome() {\n//     console.log(\"Hello\");\n//     for (let i = 0; i < 3; i++) {\n//         await delay(500);\n//         console.log(\".\");\n//     }\n//     console.log(\"World!\");\n// }\n//\n// dramaticWelcome();\n\nexport default {\n  subscriptions: null,\n  bugs: null,\n  panelView: null,\n\n  activate (state: any) {\n    this.bugs = new Bugs();\n    this.panelView = atom.workspace.addTopPanel({\n      item: this.bugs.getPanelViewElement(),\n      visible: true\n    });\n    //\n    console.log('workspace', atom.workspace)\n    console.log('project', atom.project)\n    // set Paths\n    let projects = atom.project['getPaths']()\n    this.bugs.panelView.setPaths(projects)\n    // observe path changes\n    atom.project.onDidChangePaths((projects) => this.bugs.panelView.setPaths(projects))\n    // observe editors\n    atom.workspace.observeTextEditors((editor) => {\n      if (!editor.getPath || !editor.editorElement) return\n      this.bugs.observeEditor(editor)\n    });\n    // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable\n    this.subscriptions = new CompositeDisposable();\n    this.subscriptions.add(atom.commands.add('atom-workspace', {\n      'atom-bugs:debug': () => this.debug()\n    }));\n  },\n\n  provideBugsService () {\n    return this.bugs.pluginManager;\n  },\n\n  deactivate () {\n    this.subscriptions.dispose();\n    this.bugs.destroy();\n  },\n\n  debug () {\n    // toggle debug\n    console.log('toggle')\n  }\n};\n"]}