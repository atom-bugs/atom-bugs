{"version":3,"file":"main.js","sourceRoot":"","sources":["../lib/main.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAEZ,OAAO,EACL,eAAe,EACf,qBAAqB,EACrB,iBAAiB,EAClB,MAAM,cAAc,CAAC;AAEtB,MAAM,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAmBhD,eAAe;IACb,aAAa,EAAE,IAAI;IAEnB,iBAAiB,EAAE,IAAI;IACvB,aAAa,EAAE,IAAI;IACnB,WAAW,EAAE,IAAI;IACjB,SAAS,EAAE,IAAI;IAEf,QAAQ,CAAE,KAAU;QAElB,IAAI,CAAC,WAAW,GAAG,IAAI,eAAe,EAAE,CAAC;QACzC,IAAI,CAAC,iBAAiB,GAAG,IAAI,qBAAqB,EAAE,CAAC;QACrD,IAAI,CAAC,aAAa,GAAG,IAAI,iBAAiB,EAAE,CAAC;QAG7C,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC;YAC1C,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;YACnC,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,MAAM;YACrC,IAAI,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAA;YACxD,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACrC,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,WAAW,CAAC,mBAAmB,CAAC;YACnC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAA;QAC5B,CAAC,CAAC,CAAA;QAKF,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE,CAAA;QACzC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;QAEnC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAA;QAEhF,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM;YAC7C,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;gBAC3C,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;YAC9C,CAAC;QACH,CAAC,CAAC,CAAA;QAEF,IAAI,CAAC,aAAa,GAAG,IAAI,mBAAmB,EAAE,CAAC;QAC/C,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,EAAE;YACzD,iBAAiB,EAAE,MAAM,IAAI,CAAC,KAAK,EAAE;SACtC,CAAC,CAAC,CAAC;IACN,CAAC;IAED,kBAAkB;QAChB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,UAAU;QACR,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAC7B,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK;QAEH,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IACvB,CAAC;CACF,CAAC","sourcesContent":["'use babel';\n\nimport {\n  BugsToolbarView,\n  BugsBreakpointManager,\n  BugsPluginManager\n} from './bugs/index';\n\nconst { CompositeDisposable } = require('atom');\n\n// function delay(milliseconds: number) {\n//   return new Promise<void>(resolve => {\n//     setTimeout(resolve, milliseconds);\n//   });\n// }\n//\n// async function dramaticWelcome() {\n//     console.log(\"Hello\");\n//     for (let i = 0; i < 3; i++) {\n//         await delay(500);\n//         console.log(\".\");\n//     }\n//     console.log(\"World!\");\n// }\n//\n// dramaticWelcome();\n\nexport default {\n  subscriptions: null,\n\n  breakpointManager: null,\n  pluginManager: null,\n  toolbarView: null,\n  panelView: null,\n\n  activate (state: any) {\n    // Create bugs instances\n    this.toolbarView = new BugsToolbarView();\n    this.breakpointManager = new BugsBreakpointManager();\n    this.pluginManager = new BugsPluginManager();\n\n    // Add Top Panel\n    this.panelView = atom.workspace.addTopPanel({\n      item: this.toolbarView.getElement(),\n      visible: true\n    });\n    // Activate Selected Plugin\n    this.pluginManager.didAddPlugin((plugin) => {\n      let currentPlugin = this.toolbarView.getSelectedScheme()\n      if (plugin.name === currentPlugin.name) {\n        this.toolbarView.setScheme(plugin);\n      }\n    })\n    // Open Scheme Editor\n    this.toolbarView.didOpenSchemeEditor(() => {\n      console.log('open editor')\n    })\n\n    // console.log('workspace', atom.workspace)\n    // console.log('project', atom.project)\n    // set Paths\n    let projects = atom.project['getPaths']()\n    this.toolbarView.setPaths(projects)\n    // observe path changes\n    atom.project.onDidChangePaths((projects) => this.toolbarView.setPaths(projects))\n    // observe editors\n    atom.workspace['observeActivePaneItem']((editor) => {\n      if (editor.getPath && editor.editorElement) {\n        this.breakpointManager.observeEditor(editor)\n      }\n    })\n    // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable\n    this.subscriptions = new CompositeDisposable();\n    this.subscriptions.add(atom.commands.add('atom-workspace', {\n      'atom-bugs:debug': () => this.debug()\n    }));\n  },\n\n  provideBugsService () {\n    return this.pluginManager;\n  },\n\n  deactivate () {\n    this.subscriptions.dispose();\n    this.panelView.destroy();\n    this.toolbarView.destroy();\n  },\n\n  debug () {\n    // toggle debug\n    console.log('toggle')\n  }\n};\n"]}