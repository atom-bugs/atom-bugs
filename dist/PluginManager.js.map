{"version":3,"file":"PluginManager.js","sourceRoot":"","sources":["../lib/PluginManager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AACZ;;;;GAIG;AAEH,OAAO,EAAE,YAAY,EAAE,MAAO,QAAQ,CAAC;AAOvC,MAAM,CAAC,MAAM,aAAa,GAAkB;IAC1C,QAAQ;IACR,SAAS;IACT,UAAU;IACV,WAAW;IACX,aAAa;IACb,aAAa;IACb,YAAY;IACZ,kBAAkB;IAClB,qBAAqB;IACrB,uBAAuB;IACvB,sBAAsB;CACvB,CAAC;AAEF,MAAM;IAMJ;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAC;QACjC,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI;YACzB,IAAI,CAAC,IAAI,CAAC,GAAG;gBACX,6BAA6B;gBAC7B,2BAA2B;gBAC3B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAC3C,CAAC,CAAA;YACD,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI;gBACxB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACjD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBACzD,CAAC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,cAAc,CAAE,MAAc;QAC5B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;IAC7B,CAAC;IAED,YAAY,CAAE,QAAQ;QACpB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,SAAS,CAAE,MAAc;QACvB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IACxC,CAAC;IAED,YAAY,CAAE,MAAc;IAE5B,CAAC;CACF","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { EventEmitter }  from 'events';\n\nexport interface Plugin {\n  iconPath: String,\n  name: String\n}\n\nexport const pluginActions: Array<string> = [\n  'didRun',\n  'didStop',\n  'didPause',\n  'didResume',\n  'didStepOver',\n  'didStepInto',\n  'didStepOut',\n  'didAddBreakpoint',\n  'didRemoveBreakpoint',\n  'didEvaluateExpression',\n  'didRequestProperties'\n];\n\nexport class PluginManager {\n\n  private plugins: Array<Plugin>;\n  public activePlugin: Plugin;\n  public events: EventEmitter;\n\n  constructor () {\n    this.plugins = [];\n    this.events = new EventEmitter();\n    pluginActions.forEach((name) => {\n      this[name] = function () {\n        // console.log('emit', name);\n        // arguments.unshift(name);\n        return this.events.emit(name, arguments);\n      }\n      this.events.on(name, (args) => {\n        if (this.activePlugin && this.activePlugin[name]) {\n          this.activePlugin[name].apply(this.activePlugin, args);\n        }\n      })\n    })\n  }\n\n  activatePlugin (plugin: Plugin) {\n    this.activePlugin = plugin;\n  }\n\n  didAddPlugin (callback) {\n    this.events.on('addPlugin', callback);\n  }\n\n  getPlugins () {\n    return this.plugins;\n  }\n\n  addPlugin (plugin: Plugin) {\n    this.plugins.push(plugin);\n    this.events.emit('addPlugin', plugin);\n  }\n\n  removePlugin (plugin: Plugin) {\n\n  }\n}\n"]}