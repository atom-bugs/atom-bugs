{"version":3,"file":"plugin-client.js","sourceRoot":"","sources":["../../src/plugin/plugin-client.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nimport { ToolbarView, SchemeView } from '../scheme/index';\nimport { DebugAreaView, ConsoleView, CallStackFrames } from '../debug-area/index';\nimport { EditorManager, Breakpoints } from '../editor/index';\nimport { join } from 'path'\n\nexport class PluginClientConsole {\n  constructor (private consoleView: ConsoleView) {}\n  log (message: string): void {\n    this.consoleView.createConsoleLine(message);\n  }\n  info (message: string): void {\n    this.consoleView.createConsoleLine(message, {\n      className: 'line-info'\n    });\n  }\n  clear (): void {\n    this.consoleView.clearConsole();\n  }\n}\n\nexport interface ClientOptions {\n  debugView: DebugAreaView,\n  toolbarView: ToolbarView,\n  consoleView: ConsoleView,\n  schemeView: SchemeView,\n  editorManager: EditorManager\n}\n\nexport class PluginClient {\n  public console: PluginClientConsole;\n  private debugView: DebugAreaView;\n  private consoleView: ConsoleView;\n  private schemeView: SchemeView;\n  private toolbarView: ToolbarView;\n  private editorManager: EditorManager;\n  constructor (private options: ClientOptions) {\n    this.debugView = options.debugView;\n    this.toolbarView = options.toolbarView;\n    this.schemeView = options.schemeView;\n    this.consoleView = options.consoleView;\n    this.editorManager = options.editorManager;\n    this.console = new PluginClientConsole(this.consoleView);\n  }\n  status (text: string, options?: any) {\n    this.toolbarView.setStatus(text, options)\n  }\n  stop (): void {\n    this.debugView.togglePause(false);\n    this.toolbarView.toggleRun(true);\n    this.editorManager.removeMarkers();\n    this.consoleView.clearConsole();\n    this.debugView.clearCallStack();\n    this.debugView.clearScope();\n  }\n  run (): void {\n    this.toolbarView.toggleRun(false);\n  }\n  pause (): void {\n    this.debugView.togglePause(true);\n    // this.debugView.setPausedScript(filePath, lineNumber);\n  }\n  resume (): void {\n    this.debugView.togglePause(false);\n    this.debugView.clearCallStack();\n    this.debugView.clearScope();\n  }\n  getPathFromFile (file: string) {\n    return join(this.toolbarView.getPathName(), file)\n  }\n  getPath (file: string) {\n    return this.toolbarView.getPathName()\n  }\n  getOptions () {\n    return this.schemeView.getActivePluginOptions();\n  }\n  getBreakpoints (): Breakpoints {\n    return this.editorManager.getBreakpoints();\n  }\n  activateBreakpoint (filePath: string, lineNumber: number): void {\n    this.editorManager.breakOnFile(filePath, lineNumber);\n  }\n  setCallStack (items: CallStackFrames) {\n    this.debugView.insertCallStackFromFrames(items);\n  }\n  setScope (scope: any) {\n    this.debugView.insertScope(scope);\n  }\n}\n"]}