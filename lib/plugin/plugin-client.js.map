{"version":3,"file":"plugin-client.js","sourceRoot":"","sources":["../../src/plugin/plugin-client.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAUZ,MAAM;IACJ,YAAqB,SAAwB;QAAxB,cAAS,GAAT,SAAS,CAAe;IAAG,CAAC;IACjD,GAAG,CAAE,OAAe;QAClB,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC5C,CAAC;IACD,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IAChC,CAAC;CACF;AAQD,MAAM;IAKJ,YAAqB,OAAsB;QAAtB,YAAO,GAAP,OAAO,CAAe;QACzC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;QACvC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;QAC3C,IAAI,CAAC,OAAO,GAAG,IAAI,mBAAmB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzD,CAAC;IACD,IAAI;QACF,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACjC,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;QACnC,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;QAC9B,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;IACD,GAAG;QACD,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;IACD,KAAK;QACH,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QACjC,wDAAwD;IAC1D,CAAC;IACD,MAAM;QACJ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAClC,IAAI,CAAC,SAAS,CAAC,cAAc,EAAE,CAAC;QAChC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;IACD,cAAc;QACZ,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE,CAAC;IAC7C,CAAC;IACD,kBAAkB,CAAE,QAAgB,EAAE,UAAkB;QACtD,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;IACvD,CAAC;IACD,YAAY,CAAE,KAAsB;QAClC,IAAI,CAAC,SAAS,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;IAClD,CAAC;IACD,QAAQ,CAAE,KAAU;QAClB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACpC,CAAC;CACF","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nimport { ToolbarView } from '../scheme/toolbar-view';\nimport { DebugAreaView, CallStackFrames } from '../debug-area/debug-area-view';\nimport { EditorManager, Breakpoints } from '../editor/index';\n\nexport class PluginClientConsole {\n  constructor (private debugView: DebugAreaView) {}\n  log (message: string): void {\n    this.debugView.createConsoleLine(message);\n  }\n  clear (): void {\n    this.debugView.clearConsole();\n  }\n}\n\nexport interface ClientOptions {\n  debugView: DebugAreaView,\n  toolbarView: ToolbarView,\n  editorManager: EditorManager\n}\n\nexport class PluginClient {\n  public console: PluginClientConsole;\n  private debugView: DebugAreaView;\n  private toolbarView: ToolbarView;\n  private editorManager: EditorManager;\n  constructor (private options: ClientOptions) {\n    this.debugView = options.debugView;\n    this.toolbarView = options.toolbarView;\n    this.editorManager = options.editorManager;\n    this.console = new PluginClientConsole(this.debugView);\n  }\n  stop (): void {\n    this.debugView.togglePause(false);\n    this.toolbarView.toggleRun(true);\n    this.editorManager.removeMarkers();\n    this.debugView.clearConsole();\n    this.debugView.clearCallStack();\n    this.debugView.clearScope();\n  }\n  run (): void {\n    this.toolbarView.toggleRun(false);\n  }\n  pause (): void {\n    this.debugView.togglePause(true);\n    // this.debugView.setPausedScript(filePath, lineNumber);\n  }\n  resume (): void {\n    this.debugView.togglePause(false);\n    this.debugView.clearCallStack();\n    this.debugView.clearScope();\n  }\n  getBreakpoints (): Breakpoints {\n    return this.editorManager.getBreakpoints();\n  }\n  activateBreakpoint (filePath: string, lineNumber: number): void {\n    this.editorManager.breakOnFile(filePath, lineNumber);\n  }\n  setCallStack (items: CallStackFrames) {\n    this.debugView.insertCallStackFromFrames(items);\n  }\n  setScope (scope: any) {\n    this.debugView.insertScope(scope);\n  }\n}\n"]}