{"version":3,"file":"Location.js","sourceRoot":"","sources":["../src2/Location.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;;;;;;;;;AACZ;;;;GAIG;AAEH,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAI5E,MAAM;IAIJ,YAAqB,QAAoB;QAApB,aAAQ,GAAR,QAAQ,CAAY;QACvC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IACK,UAAU,CAAE,QAAoB;;YACpC,IAAI,CAAC,MAAM,IAAS,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;gBAC/D,WAAW,EAAE,QAAQ,CAAC,UAAU,IAAI,CAAC;gBACrC,aAAa,EAAE,QAAQ,CAAC,YAAY,IAAI,CAAC;aAC1C,CAAC,CAAA,CAAC;YACH,IAAI,CAAC,MAAM;iBACR,UAAU,EAAE;iBACZ,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC;iBACjD,OAAO,CAAC,CAAC,MAAM;gBACd,MAAM,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YACL,MAAM,KAAK,GAAG,IAAI,KAAK,CACrB,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,YAAY,CAAC,EAC5C,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YACrD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAC3D,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,UAAU,EAAE;gBAC1C,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,sBAAsB;aAC9B,CAAC,CAAC;YACH,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAChD,IAAI,EAAE,aAAa;gBACnB,KAAK,EAAE,sBAAsB;aAC9B,CAAC,CAAC;YACH,IAAI,CAAC,KAAK,EAAE,CAAC;QACf,CAAC;KAAA;IACD,OAAO;QACL,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,MAAM;iBACR,UAAU,EAAE;iBACZ,MAAM,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC;iBACjD,OAAO,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QACxC,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC;YAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;QAC/C,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;YAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC;CACF","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nconst { CompositeDisposable, Range, Emitter, Disposable } = require('atom');\nimport { Breakpoint, BreakpointManager } from './Breakpoint';\n\n\nexport class Location {\n  private lineMarker: any;\n  private lineNumberMarker: any;\n  private editor: any;\n  constructor (private location: Breakpoint) {\n    this.openEditor(location);\n  }\n  async openEditor (location: Breakpoint) {\n    this.editor = <any> await atom.workspace.open(location.filePath, {\n      initialLine: location.lineNumber || 0,\n      initialColumn: location.columnNumber || 0\n    });\n    this.editor\n      .getGutters()\n      .filter((gutter) => gutter.name !== 'line-number')\n      .forEach((gutter) => {\n        gutter.hide();\n      });\n    const range = new Range(\n      [location.lineNumber, location.columnNumber],\n      [location.lineNumber, location.columnNumber]);\n    this.lineMarker = this.editor.markBufferRange(range);\n    this.lineNumberMarker = this.editor.markBufferRange(range);\n    this.editor.decorateMarker(this.lineMarker, {\n      type: 'line',\n      class: 'xatom-debug-location'\n    });\n    this.editor.decorateMarker(this.lineNumberMarker, {\n      type: 'line-number',\n      class: 'xatom-debug-location'\n    });\n    atom.focus();\n  }\n  destroy () {\n    if (this.editor) {\n      this.editor\n        .getGutters()\n        .filter((gutter) => gutter.name !== 'line-number')\n        .forEach((gutter) => gutter.show());\n    }\n    if (this.lineMarker) this.lineMarker.destroy();\n    if (this.lineNumberMarker) this.lineNumberMarker.destroy();\n  }\n}\n"]}