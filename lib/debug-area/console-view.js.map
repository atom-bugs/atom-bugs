{"version":3,"file":"console-view.js","sourceRoot":"","sources":["../../src/debug-area/console-view.ts"],"names":[],"mappings":"AAAA,WAAW,CAAA;AACX;;;;GAIG;AAEH,OAAO,EAML,aAAa,EACb,aAAa,EAEd,MAAM,kBAAkB,CAAA;AAEzB,OAAO,EAAE,YAAY,EAAE,MAAO,QAAQ,CAAA;AAOtC,MAAM;IAKJ,YAAa,OAAwB;QACnC,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,EAAE,CAAA;QAChC,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,mBAAmB,CAAC,CAAA;QACjD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,YAAY;QACV,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,EAAE,CAAA;IAC7B,CAAC;IAED,iBAAiB,CAAE,KAAa,EAAE,OAAQ;QACxC,IAAI,IAAI,GAAG,aAAa,CAAC,wBAAwB,EAAE,OAAO,CAAC,CAAA;QAC3D,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAA;QACxB,CAAC;QACD,UAAU,CAAE;YACV,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAA;QACpD,CAAC,EAAE,GAAG,CAAC,CAAA;QACP,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;IAC1C,CAAC;IAED,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,OAAO,CAAA;IACrB,CAAC;IAED,OAAO;QACL,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAA;IACvB,CAAC;CACF","sourcesContent":["'use babel'\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  insertElement,\n  attachEventFromObject\n} from '../element/index'\n\nimport { EventEmitter }  from 'events'\nimport { parse } from 'path'\n\nexport interface ConsoleOptions {\n\n}\n\nexport class ConsoleView {\n\n  private element: HTMLElement\n  private events: EventEmitter\n\n  constructor (options?: ConsoleOptions) {\n    this.events = new EventEmitter()\n    this.element = createElement('atom-bugs-console')\n    this.element.setAttribute('tabindex', '-1');\n  }\n\n  clearConsole () {\n    this.element.innerHTML = ''\n  }\n\n  createConsoleLine (entry: string, options?) {\n    let line = createElement('atom-bugs-console-line', options)\n    if (entry && entry.length > 0) {\n      line.innerHTML = entry\n    }\n    setTimeout (() => {\n      this.element.scrollTop = this.element.scrollHeight\n    }, 250)\n    return insertElement(this.element, line)\n  }\n\n  getElement () {\n    return this.element\n  }\n\n  destroy () {\n    this.element.remove()\n  }\n}\n"]}