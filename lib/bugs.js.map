{"version":3,"file":"bugs.js","sourceRoot":"","sources":["../src/bugs.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { ToolbarView } from './scheme/index';\nimport { DebugAreaView } from './debug-area/debug-area-view';\nimport { EditorManager } from './editor/index';\nimport { PluginManager, PluginClient } from './plugin/index';\n\nexport class Bugs {\n\n  public pluginManager: PluginManager = new PluginManager();\n  public editorManager: EditorManager;\n  public toolbarView: ToolbarView;\n  public debugView: DebugAreaView;\n\n  constructor () {\n    // Create Editor Manager\n    this.editorManager = new EditorManager({\n      pluginManager: this.pluginManager,\n      didAddBreakpoint: (filePath, lineNumber) => {\n        this.debugView.createBreakpointLine(filePath, lineNumber);\n      },\n      didRemoveBreakpoint: (filePath, lineNumber) => {\n        this.debugView.removeBreakpointLine(filePath, lineNumber);\n      },\n      didBreak: async (filePath, lineNumber) => {\n        let textEditor = await atom.workspace.open(filePath, {\n          initialLine: lineNumber - 1,\n          initialColumn: 0\n        })\n        this.editorManager.createBreakMarker(textEditor, lineNumber);\n      },\n    });\n    // Create toolbar\n    this.toolbarView = new ToolbarView({\n      didRun: () => {\n        let editor = atom.workspace.getActiveTextEditor();\n        let currentFile = editor.getPath();\n        let run = this.pluginManager.run({\n          currentFile\n        })\n      },\n      didStop: () => {\n        this.pluginManager.stop()\n      },\n      didOpenSchemeEditor: () => {\n        console.log('open editor')\n      }\n    });\n    // Create debug area\n    this.debugView = new DebugAreaView({\n      didPause: () => this.pluginManager.pause(),\n      didResume: () => this.pluginManager.resume(),\n      didStepOver: () => this.pluginManager.stepOver(),\n      didStepInto: () => this.pluginManager.stepInto(),\n      didStepOut: () => this.pluginManager.stepOut(),\n      didOpenFile: (filePath: string, lineNumber: number, columnNumber: number) => {\n        atom.workspace.open(filePath, {\n          initialLine: lineNumber - 1,\n          initialColumn: columnNumber - 1\n        })\n      },\n      didRequestProperties: (result, inspectView) => {\n        return this.pluginManager.requestProperties(result, inspectView);\n      }\n    });\n    // Atom bugs plugin client\n    let client = new PluginClient({\n      debugView: this.debugView,\n      toolbarView: this.toolbarView,\n      editorManager: this.editorManager\n    });\n    // Add editor features\n    atom.workspace['observeActivePaneItem']((editor) => {\n      this.editorManager.addFeatures(editor);\n    })\n    // Listen plugin addition\n    this.pluginManager.didAddPlugin((plugin) => {\n      // Register client\n      if (plugin.register) plugin.register(client)\n      // Activate Selected Plugin\n      if (!this.pluginManager.activePlugin) {\n        this.pluginManager.activatePlugin(plugin);\n        this.toolbarView.setScheme(plugin);\n      }\n    });\n  }\n\n  getToolbarElement () {\n    return this.toolbarView.getElement();\n  }\n  getConsoleElement () {\n    return this.debugView.getConsoleElement();\n  }\n  getDebugAreaElement () {\n    return this.debugView.getDebugElement();\n  }\n\n  destroy () {\n    // destroy all\n    this.toolbarView.destroy();\n    this.debugView.destroy();\n  }\n\n}\n"]}