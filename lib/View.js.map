{"version":3,"file":"View.js","sourceRoot":"","sources":["../src2/View.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nimport { EventEmitter } from 'events';\nimport 'reflect-metadata';\n\n// const viewControllerRegistry = new EventEmitter();\nconst viewRegistry = [];\n// viewControllerRegistry.setMaxListeners(0);\n//\n//\n// function getViewController (target: any): Promise<{\n//   viewController: ViewController,\n//   complete: Function\n// }> {\n//   return new Promise ((resolve, reject) => {\n//     viewControllerRegistry.on('viewControllerLoad', function eventListener (controller: ViewController) {\n//       if (Object.getPrototypeOf(controller.controller) === target) {\n//         const task = new Promise((taskResolve, taskReject) => {\n//           resolve({\n//             viewController: controller,\n//             complete: taskResolve\n//           });\n//         });\n//         console.log('register');\n//         controller.tasks.push(task);\n//         viewControllerRegistry.removeListener('viewControllerLoad', eventListener);\n//       }\n//     })\n//   })\n// }\n\nfunction getHTMLElement (controller: ViewController, query: string): Promise<HTMLElement> {\n  return new Promise ((resolve, reject) => {\n    const el = controller.viewElement.element.querySelector(query);\n    if (el) {\n      resolve(<HTMLElement> el);\n    } else {\n      reject(`element '${query}' does not exists`);\n    }\n  })\n}\n\n\nexport function Action (eventName: string, query: string) {\n  return function (target, key, descriptor) {\n    viewRegistry.push({\n      target,\n      async create (viewController: ViewController, instance: any) {\n        const el = await getHTMLElement(viewController, query);\n        el.addEventListener(eventName, (event) => {\n          if (instance[key]) {\n            instance[key](event);\n          }\n        });\n      }\n    });\n    return descriptor;\n  }\n}\n\nexport function Element (query: string) {\n  return <any> function (target, key, descriptor) {\n    viewRegistry.push({\n      target,\n      async create (viewController: ViewController, instance: any) {\n        const el = await getHTMLElement(viewController, query);\n        instance[key] = el;\n      }\n    });\n    return descriptor;\n  }\n}\n\nexport class ViewElement {\n  public element: HTMLElement;\n  constructor (elementName: string, template?: string) {\n    this.element = document.createElement(elementName);\n    this.element.innerHTML = template || '';\n  }\n}\n\nexport class ViewController {\n  public controller: any;\n  constructor (public viewElement: ViewElement) {\n    // do something\n  }\n}\n\nexport function View (options: { name: string, template?: string }) {\n  return <any> function createView (target: any, key: string, descriptor: Object) {\n    const instance: any = function () {\n      const paramTypes = Reflect.getMetadata('design:paramtypes', target, key);\n      const viewElement = new ViewElement(options.name, options.template);\n      const viewController = new ViewController(viewElement);\n      const paramValues = paramTypes.map((param, index) => {\n        if (param === ViewElement) return viewElement;\n        if (param === ViewController) return viewController;\n        return arguments[index];\n      });\n      target.apply(this, paramValues);\n      const load = viewRegistry\n        .filter(({target}) => {\n          return Object.getPrototypeOf(this) === target;\n        })\n        .map(({create}) => {\n          return create(viewController, this);\n        })\n        .reduce((r, p) => p.then(r), Promise.resolve())\n        .then(() => {\n          if (this.viewDidLoad) {\n            this.viewDidLoad();\n          }\n        });\n    };\n    instance.prototype = target.prototype;\n    return instance;\n  }\n}\n"]}