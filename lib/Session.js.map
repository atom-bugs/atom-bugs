{"version":3,"file":"Session.js","sourceRoot":"","sources":["../src2/Session.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;;;;;;;;;AAQZ,OAAO,EAAiB,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAChE,OAAO,EAAsB,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAE/E,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAetC,MAAM,wBAAyB,WAAW,EACxC,gBAAgB,EAChB,aAAa,EACb,kBAAkB,EAClB,iBAAiB;IACjB,IAAI,eAAe,CAAC;IACpB,MAAM,CAAW;QACf,SAAS;YACP,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,iBAAiB,EAAE,CAAC;YAC9D,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;gBAAC,MAAM,CAAC;YACjD,MAAM,CAAC;gBACL,WAAW,EAAE,MAAM,CAAC,OAAO,EAAE;aAC9B,CAAC;QACJ,CAAC;QACD,cAAc;YACZ,MAAM,CAAC,iBAAiB,CAAC,cAAc,EAAE,CAAC;QAC5C,CAAC;QACK,QAAQ,CAAE,QAAoB;;gBAClC,EAAE,CAAC,CAAC,eAAe,CAAC;oBAAC,eAAe,CAAC,OAAO,EAAE,CAAC;gBAC/C,eAAe,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;SAAA;QACD,MAAM,CAAE,CAAC;YACP,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;YAClC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;YACjD,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;QAC3C,CAAC;QACD,KAAK;YACH,gBAAgB,CAAC,cAAc,EAAE,CAAC;QACpC,CAAC;QACD,MAAM;YACJ,gBAAgB,CAAC,eAAe,EAAE,CAAC;QACrC,CAAC;QACD,KAAK;YACH,WAAW,CAAC,eAAe,EAAE,CAAC;YAC9B,gBAAgB,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YACxC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAC/C,CAAC;QACD,GAAG;YACD,EAAE,CAAC,CAAC,eAAe,CAAC;gBAAC,eAAe,CAAC,OAAO,EAAE,CAAC;YAC/C,WAAW,CAAC,cAAc,EAAE,CAAC;YAC7B,gBAAgB,CAAC,IAAI,EAAE,CAAC;YACxB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAC3C,CAAC;KACF,CAAA;AACH,CAAC","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { DebugControlView } from './DebugControlView';\nimport { DebugAreaView, DEBUG_AREA_URI } from './DebugAreaView';\nimport { DebugNavigatorView, DEBUG_NAVIGATOR_URI } from './DebugNavigatorView';\nimport { Breakpoint, BreakpointManager } from './Breakpoint';\nimport { Location } from './Location';\n\nexport interface Session {\n  getScheme (): void;\n  start (): void;\n  end (): void;\n  status (options: {\n    text: string,\n    type?: 'error' | 'warning' | 'success',\n    loading: boolean\n  }): void;\n}\n\n\n\nexport function createSession (toolbarView,\n  debugControlView,\n  debugAreaView,\n  debugNavigatorView,\n  breakpointManager) {\n  let currentLocation;\n  return <Session> {\n    getScheme () {\n      const editor = atom.workspace.getCenter().getActivePaneItem();\n      if (!atom.workspace.isTextEditor(editor)) return;\n      return {\n        currentPath: editor.getPath()\n      };\n    },\n    getBreakpoints () {\n      return breakpointManager.getBreakpoints();\n    },\n    async location (location: Breakpoint) {\n      if (currentLocation) currentLocation.destroy();\n      currentLocation = new Location(location);\n    },\n    status (o): void  {\n      toolbarView.setStatusText(o.text);\n      toolbarView.setStatusLoading(o.loading || false);\n      toolbarView.setStatusState(o.type || '');\n    },\n    pause () {\n      debugControlView.enableControls();\n    },\n    resume () {\n      debugControlView.disableControls();\n    },\n    start (): void {\n      toolbarView.disableControls();\n      debugControlView.show();\n      atom.workspace.open(DEBUG_AREA_URI, {});\n      atom.workspace.open(DEBUG_NAVIGATOR_URI, {});\n    },\n    end (): void {\n      if (currentLocation) currentLocation.destroy();\n      toolbarView.enableControls();\n      debugControlView.hide();\n      atom.workspace.hide(DEBUG_AREA_URI);\n      atom.workspace.hide(DEBUG_NAVIGATOR_URI);\n    }\n  }\n}\n"]}