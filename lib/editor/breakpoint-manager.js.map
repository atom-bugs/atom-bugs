{"version":3,"file":"breakpoint-manager.js","sourceRoot":"","sources":["../../src/editor/breakpoint-manager.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AAQZ,OAAO,EAAE,OAAO,EAAE,MAAO,mBAAmB,CAAC;AAU7C,MAAM;IAKJ;QAHQ,gBAAW,GAAgB,EAAE,CAAC;QAC9B,YAAO,GAAY,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAE3C,CAAC;IAEV,cAAc;QACnB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAA;IACzB,CAAC;IAED,aAAa,CAAE,QAAgB,EAAE,UAAkB;QACjD,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,IAAI;YAC1C,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,CAAA;QACvE,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC;IAED,sBAAsB,CAAC,QAAgB;QACrC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,IAAI;YAClC,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAA;QACrC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB,CAAE,UAAsB;QACtC,MAAM,CAAC,IAAI,OAAO,CAAE,CAAC,OAAO,EAAE,MAAM;YAClC,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;YACjD,EAAE,CAAA,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,oFAAoF;gBACpF,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;gBAC7B,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBACjC,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACvB,CAAC;YACD,MAAM,CAAC,MAAM,CAAC,4BAA4B,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,aAAa,CAAE,MAAW,EAAE,UAAkB,EAAE,QAAgB;QAC9D,MAAM,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjC,IAAI,UAAU,GAAG;gBACf,UAAU;gBACV,QAAQ;gBACR,MAAM;aACO,CAAA;YACf,IAAI,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC9C,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,eAAe,EAAE,CAAC;gBACvB,OAAO,CAAC,UAAU,CAAC,CAAC;YACtB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,0BAA0B,CAAC,CAAC;YACrC,CAAC;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,mBAAmB;QACjB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,eAAe;QACb,IAAI,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;YAClC,MAAM,CAAC;gBACL,QAAQ,EAAE,CAAC,CAAC,QAAQ;gBACpB,UAAU,EAAE,CAAC,CAAC,UAAU;aACzB,CAAA;QACH,CAAC,CAAC,CAAA;QACF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { EventEmitter }  from 'events';\nimport { Storage }  from '../scheme/storage';\n\nexport interface Breakpoint {\n  lineNumber: number,\n  filePath: string,\n  marker: any\n}\n\nexport type Breakpoints = Array<Breakpoint>;\n\nexport class BreakpointManager {\n\n  private breakpoints: Breakpoints = [];\n  private storage: Storage = new Storage('breakpoints.json');\n\n  constructor () {}\n\n  public getBreakpoints (): Breakpoints {\n    return this.breakpoints\n  }\n\n  getBreakpoint (filePath: String, lineNumber: Number): Breakpoint {\n    let index = this.breakpoints.findIndex((item) => {\n      return (item.filePath === filePath && item.lineNumber === lineNumber)\n    })\n    return this.breakpoints[index];\n  }\n\n  getBreakpointsFromFile(filePath: String): Breakpoints {\n    return this.breakpoints.filter((item) => {\n      return (item.filePath === filePath)\n    });\n  }\n\n  removeBreakpoint (breakpoint: Breakpoint): Promise<boolean> {\n    return new Promise ((resolve, reject) => {\n      let index = this.breakpoints.indexOf(breakpoint);\n      if(index != -1) {\n        // this.events.emit('removeBreakpoint', breakpoint.filePath, breakpoint.lineNumber);\n        breakpoint.marker.destroy();\n      \tthis.breakpoints.splice(index, 1);\n        this.saveBreakpoints();\n        return resolve(true);\n      }\n      return reject('breakpoint does not exists');\n    })\n  }\n\n  addBreakpoint (marker: any, lineNumber: number, filePath: string): Promise<Breakpoint> {\n    return new Promise((resolve, reject) => {\n      let breakpoint = {\n        lineNumber,\n        filePath,\n        marker\n      } as Breakpoint\n      let index = this.breakpoints.push(breakpoint);\n      if (index > -1) {\n        this.saveBreakpoints();\n        resolve(breakpoint);\n      } else {\n        reject('unable to add breakpoint');\n      }\n    })\n  }\n\n  getSavedBreakpoints (): Promise<Breakpoints> {\n    return this.storage.read();\n  }\n\n  saveBreakpoints () {\n    let format = this.breakpoints.map((b) => {\n      return {\n        filePath: b.filePath,\n        lineNumber: b.lineNumber\n      }\n    })\n    return this.storage.saveFromObject(format);\n  }\n}\n"]}