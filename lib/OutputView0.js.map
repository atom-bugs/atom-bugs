{"version":3,"file":"OutputView0.js","sourceRoot":"","sources":["../src2/OutputView0.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { View, ViewElement } from './View';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { spawn as spawnPty } from 'node-pty';\n\nconst Terminal = require('xterm');\nconst path = require('path');\n\nTerminal.loadAddon('fit');\n\nexport const OUTPUT_URI = 'xatom-debug://output';\n\n@View({\n  name: 'xatom-debug-output'\n})\nexport class OutputView {\n\n constructor () {\n   this._openTerminal();\n   this._handleEvents();\n }\n\n serialize() {\n   return {\n     deserializer: 'TerminalView'\n   };\n }\n\n destroy() {\n\n   // Stop Observing Resize Events\n   this._resizeObserver.disconnect();\n\n   // Kill the Pseudoterminal (pty) Process\n   if (this.pty) this.pty.kill();\n\n   // Destroy the Terminal Instance\n   if (this.terminal) this.terminal.destroy();\n\n   // Detach from the DOM\n   etch.destroy(this);\n\n   // Dispose of Disposables\n   this.disposables.dispose();\n\n }\n\n _handleEvents() {\n\n   // Transfer Focus to Terminal\n   this.element.addEventListener('focus', () => this.terminal.focus());\n\n   // Observe Resize Events\n   this._resizeObserver = new ResizeObserver(this._didResize.bind(this));\n   this._resizeObserver.observe(this.element);\n\n   // Process Terminal Input Events\n   this.terminal.on('data', (data) => {\n     return this.pty.write(data);\n   });\n\n   // Process Terminal Output Events\n   this.pty.on('data', (data) => {\n     return this.terminal.write(data);\n   });\n\n   // Process Terminal Exit Events\n   this.pty.on('exit', () => {\n     let pane = atom.workspace.paneForItem(this);\n     if (pane) pane.destroyItem(this);\n   });\n\n }\n\n //\n // Resizes the terminal instance to fit its parent container. Once the new\n // dimensions are established, the calculated columns and rows are passed to\n // the pseudoterminal (pty) to remain consistent.\n //\n _didResize() {\n\n   // Resize Terminal to Container\n   this.terminal.fit();\n\n   // Update Pseudoterminal Process w/New Dimensions\n   this.pty.resize(this.terminal.cols, this.terminal.rows);\n\n }\n\n render() {\n   return (\n     <terminal-view attributes={{tabindex: 0}} />\n   );\n }\n\n update() {\n   return etch.update(this);\n }\n\n _openTerminal() {\n   this.pty = this._openPseudoterminal();\n   this.terminal = new Terminal();\n   this.terminal.open(this.element, true);\n   this.applyThemeStyles();\n }\n\n _openPseudoterminal() {\n   const projectPaths = atom.project.getPaths();\n   let cwd;\n   if (projectPaths.length > 0) {\n     cwd = projectPaths[0];\n   } else {\n     cwd = process.env.HOME;\n   }\n   return spawnPty(process.env.SHELL, [], {\n     name: 'xterm-color',\n     cwd: path.resolve(cwd),\n     env: process.env\n   });\n }\n\n //\n // Clears the contents of the terminal buffer. This is a simple proxy to the\n // `clear()` function on the Xterm instance.\n //\n clear() {\n   this.terminal.clear();\n }\n\n //\n // Copies the current selection to the Atom clipboard.\n //\n copySelection() {\n   let selectedText = window.getSelection().toString();\n   let preparedText = this._prepareTextForClipboard(selectedText);\n   atom.clipboard.write(preparedText);\n }\n\n //\n // Pastes the contents of the Atom clipboard to the terminal (via the\n // pseudoterminal).\n //\n pasteFromClipboard() {\n   let text = atom.clipboard.read();\n   this.pty.write(text);\n }\n\n //\n // Xterm.js replaces all spaces with non-breaking space characters. Before\n // writing the selection to the clipboard, we need to convert these back to\n // standard space characters.\n //\n // This method was lifted from the Xterm.js source, with some slight\n // modifications.\n //\n _prepareTextForClipboard(text) {\n   const space = String.fromCharCode(32);\n   const nonBreakingSpace = String.fromCharCode(160);\n   const allNonBreakingSpaces = new RegExp(nonBreakingSpace, 'g');\n\n   return text.split('\\n').map((line) => {\n     return line.replace(/\\s+$/g, '').replace(allNonBreakingSpaces, space);\n   }).join('\\n');\n }\n\n getDefaultLocation() {\n   return 'bottom';\n }\n\n getElement () {\n   return this.viewElement.element;\n }\n\n getIconName() {\n   return 'terminal';\n }\n\n getTitle() {\n   return 'Terminal';\n }\n}\n\n\n// import { View, ViewElement } from './View';\n// import { spawn as spawnPty } from 'node-pty';\n// import { resolve } from 'path';\n// const Terminal = require('xterm');\n// Terminal.loadAddon('fit');\n//\n// export const OUTPUT_URI = 'xatom-debug://output';\n//\n// @View({\n//   name: 'xatom-debug-output'\n// })\n// export class OutputView {\n//   private pty: any;\n//   private terminal: any;\n//   constructor (private viewElement: ViewElement) {\n//     const projectPaths = atom.project.getPaths();\n//     const element = this.getElement();\n//     let cwd;\n//     if (projectPaths.length > 0) {\n//       cwd = projectPaths[0];\n//     } else {\n//       cwd = process.env.HOME;\n//     }\n//     console.log(spawnPty);\n//     this.pty = spawnPty(process.env.SHELL, [], {\n//       name: 'xterm-color',\n//       cwd: resolve(cwd),\n//       env: process.env\n//     });\n//     this.terminal = new Terminal({\n//       cursorBlink: true\n//     });\n//     this.terminal.open(element, true);\n//     this.terminal.fit();\n//     element.setAttribute('tabindex', '0');\n//     element.classList.add('native-key-bindings');\n//     element.addEventListener('focus', () => {\n//       this.terminal.focus();\n//     });\n//     this.pty.resize(this.terminal.cols, this.terminal.rows);\n//     this.terminal.on('data', (data) => this.pty.write(data));\n//     this.pty.on('data', (data) => this.terminal.write(data));\n//     this.pty.on('exit', () => {\n//       console.log('pty exited');\n//     });\n//   }\n//   adjust () {\n//\n//   }\n//   getElement () {\n//     return this.viewElement.element;\n//   }\n//   getTitle () {\n//     return 'Output';\n//   }\n//   getURI () {\n//     return OUTPUT_URI;\n//   }\n//   getPreferredLocation () {\n//     return 'bottom';\n//   }\n//   getAllowedLocations () {\n//     return ['bottom', 'top'];\n//   }\n//   destroy () {\n//     atom.workspace.hide(OUTPUT_URI);\n//     this.viewElement.element.remove();\n//   }\n// }\n"]}