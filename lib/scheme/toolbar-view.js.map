{"version":3,"file":"toolbar-view.js","sourceRoot":"","sources":["../../src/scheme/toolbar-view.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * Atom Bugs\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nimport { parse } from 'path';\nimport { EventEmitter }  from 'events';\nimport {\n  createGroupButtons,\n  createButton,\n  createIcon,\n  createIconFromPath,\n  createText,\n  createElement,\n  createSelect,\n  createOption,\n  insertElement,\n  attachEventFromObject\n} from '../element/index';\n\nexport interface ToolbarOptions {\n  didOpenSchemeEditor?: Function,\n  didRun?: Function,\n  didChangePath?: Function,\n  didStop?: Function\n}\n\nexport class ToolbarView {\n  private element: HTMLElement;\n  private runButton: HTMLElement;\n  private stopButton: HTMLElement;\n  private stepButtons: HTMLElement;\n  private scheme: {\n    icon: HTMLElement,\n    name: Text\n  };\n  private schemePath: {\n    select: HTMLElement,\n    name: Text\n  };\n  private selectPath: HTMLElement;\n  private events: EventEmitter;\n\n  constructor (options: ToolbarOptions) {\n\n    this.events = new EventEmitter();\n    this.element = createElement('atom-bugs-toolbar');\n    // create schemes\n    this.scheme = {\n      icon: createIconFromPath(''),\n      name: createText('')\n    };\n    // create scheme path\n    this.schemePath = {\n      name: createText('Current File'),\n      select: createSelect({\n        change: (e) => this.setPathName(e.target.value)\n      }, [])\n    }\n    this.runButton = createButton({\n      click: () => {\n        this.events.emit('didRun');\n      }\n    },[\n      createIcon('run'),\n      createText('Run')\n    ]);\n    this.stopButton = createButton({\n      disabled: true,\n      click: () => {\n        this.events.emit('didStop');\n      }\n    },[\n      createIcon('stop')\n    ]);\n\n    insertElement(this.element, createIcon('logo'))\n    insertElement(this.element, this.runButton)\n    insertElement(this.element, this.stopButton)\n    insertElement(this.element, createGroupButtons([\n      createButton({\n        className: 'bugs-scheme'\n      }, [\n        createIcon('atom'),\n        this.schemePath.name,\n        this.schemePath.select,\n        createElement('div', {\n          className: 'bugs-scheme-arrow'\n        })\n      ]),\n      createButton({\n        click: () => {\n          this.events.emit('openEditor');\n        }\n      }, [\n        this.scheme.icon,\n        this.scheme.name\n      ])\n    ]))\n\n    attachEventFromObject(this.events, [\n      'didRun',\n      'didStop',\n      'didChangePath',\n      'didOpenSchemeEditor'\n    ], options);\n  }\n\n  private setPathName (pathName: string) {\n    let baseName = parse(pathName).base\n    this.schemePath.name.nodeValue = ` ${baseName}`\n    this.events.emit('didChangePath', pathName);\n  }\n\n  public toggleRun (status: boolean) {\n    this.stopButton['disabled'] = status;\n    this.runButton['disabled'] = !status;\n  }\n\n  public setScheme (plugin) {\n    // set element icon bg\n    this.scheme.icon.style.backgroundImage = `url(${plugin.iconPath})`;\n    // set element scheme name\n    this.scheme.name.nodeValue = ` ${plugin.name}`;\n  }\n\n  public setPaths (paths: Array<string>) {\n    // clear old list\n    this.schemePath.select.innerHTML = '';\n    // add new paths\n    paths.forEach((p: string, index: number) => {\n      // activate first\n      if (index === 0) {\n        this.setPathName(p)\n      }\n      // insert option to path select\n      insertElement(this.schemePath.select, createOption(parse(p).base, p))\n    })\n  }\n\n  public getElement (): HTMLElement {\n    return this.element;\n  }\n\n  public destroy () {\n    this.element.remove();\n  }\n}\n"]}