{"version":3,"file":"Breakpoint.js","sourceRoot":"","sources":["../src2/Breakpoint.ts"],"names":[],"mappings":"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","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nconst {\n  CompositeDisposable,\n  Emitter,\n  Range,\n  Disposable\n} = require('atom');\nconst cuid = require('cuid');\nimport { Storage } from './Storage';\n\nexport interface Breakpoint {\n  lineNumber: number,\n  columnNumber: number,\n  filePath: string,\n  condition: string,\n  marker?: any\n}\n\nexport type Breakpoints = Array<Breakpoint>;\n\nexport class BreakpointManager {\n  private emitter = new Emitter();\n  private breakpoints: Breakpoints = [];\n  private currentEditor: any;\n  private lineEventListener: EventListenerOrEventListenerObject;\n  public projectPath: string;\n  constructor () {\n    this.lineEventListener = (e) => {\n      const element = (<HTMLElement> e.target);\n      if (element.classList.contains('line-number')) {\n        const filePath = this.currentEditor.getPath();\n        const lineNumber = parseInt(element.textContent, 0);\n        const breakpoint = this.getBreakpoint(filePath, lineNumber);\n        if (breakpoint) {\n          this.removeBreakpoint(filePath, lineNumber);\n        } else {\n          this.addBreakpoint(filePath, lineNumber)\n        }\n      }\n    };\n  }\n  setBreakpoints (breakpoints: Breakpoints) {\n    this.breakpoints = breakpoints;\n  }\n  getBreakpoints (): Breakpoints {\n    return this.breakpoints;\n  }\n  getEditorLineNumbers (editor): Promise<HTMLElement> {\n    return new Promise((resolve, reject) => {\n      const gutters = editor.getGutters();\n      const lineGutter = gutters.find((g) => g.name === 'line-number');\n      if (lineGutter) {\n        resolve(lineGutter.element);\n      } else {\n        reject('Unable to find line numbers');\n      }\n    });\n  }\n  async attachBreakpoints (editor: any) {\n    this.dettachBreakpoints();\n    this.currentEditor = editor;\n    // Listen gutter line number\n    const lineNumbers = await this.getEditorLineNumbers(editor);\n    lineNumbers.addEventListener('click', this.lineEventListener);\n    // Restore breakpoint markers\n    const breakpoints = this.breakpoints.filter((b) => {\n      return b.filePath === editor.getPath()\n    });\n    breakpoints.forEach((b) => {\n      if (b.marker) b.marker.destroy();\n      b.marker = this.createMarker(editor, b.lineNumber - 1);\n    });\n  }\n  async dettachBreakpoints () {\n    if (this.currentEditor) {\n      const lineNumbers = await this.getEditorLineNumbers(this.currentEditor);\n      lineNumbers.removeEventListener('click', this.lineEventListener);\n    }\n  }\n  addBreakpoint (filePath: string, lineNumber: number) {\n    const breakpoint = <Breakpoint> {\n      filePath,\n      lineNumber,\n      columnNumber: 0\n    };\n    this.breakpoints.push(breakpoint);\n    if (this.currentEditor && this.currentEditor.getPath() === filePath) {\n      breakpoint.marker = this.createMarker(this.currentEditor, lineNumber - 1);\n    }\n    this.emitter.emit('didAddBreakpoint', breakpoint);\n    Storage\n      .breakpoints\n      .sublevel(this.projectPath)\n      .put(cuid(), {\n        filePath,\n        lineNumber\n      }, (err, data) => {\n        console.log('put', err, data);\n      });\n  }\n  removeBreakpoint (filePath: string, lineNumber: number) {\n    const breakpoint = this.getBreakpoint(filePath, lineNumber);\n    const index = this.breakpoints.indexOf(breakpoint);\n    if (breakpoint.marker) {\n      breakpoint.marker.destroy();\n    }\n    if (index > -1) {\n      this.emitter.emit('didRemoveBreakpoint', breakpoint);\n      this.breakpoints.splice(index, 1);\n    }\n  }\n  getBreakpoint (filePath: string, lineNumber: number) {\n    return this.breakpoints.find((b) => {\n      return b.filePath === filePath && b.lineNumber === lineNumber;\n    });\n  }\n  createMarker (editor: any, lineNumber: number) {\n    let range = new Range([lineNumber, 0], [lineNumber, 0]);\n    let marker = editor.markBufferRange(range);\n    let decorator = editor.decorateMarker(marker, {\n      type: 'line-number',\n      class: 'xatom-breakpoint'\n    });\n    return marker;\n  }\n  onDidAddBreakpoint (cb) {\n    return this.emitter.on('didAddBreakpoint', cb);\n  }\n  onDidRemoveBreakpoint (cb) {\n    return this.emitter.on('didRemoveBreakpoint', cb);\n  }\n  destroy () {\n\n  }\n}\n"]}