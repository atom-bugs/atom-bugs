{"version":3,"file":"ToolbarView.js","sourceRoot":"","sources":["../src2/ToolbarView.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;;;;;;;;;;AACZ;;;;GAIG;AAEH,MAAM,EAAE,mBAAmB,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AACrE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAEvD,OAAO,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AA8B7B,IAAa,WAAW,GAAxB;IAGE,YAAqB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAFtC,YAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAG7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;YACzC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE;YACvB,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC;IAMD,uDAAuD;IACvD,0DAA0D;IAC1D,oDAAoD;IACpD,KAAK;IACgC,QAAQ;QAC3C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACnC,CAAC;IACqC,SAAS;QAC7C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IACuC,WAAW;QACjD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAC3C,CAAC;IACyC,aAAa;QACrD,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;IACzD,CAAC;IACD,WAAW,CAAE,QAAe;QAC1B,IAAI,CAAC,cAAc,CAAC,SAAS,GAAG,EAAE,CAAC;QACnC,QAAQ,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK;YAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YACxC,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC;YAC9B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC;YACxB,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;YACxD,CAAC;YACD,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACL,CAAC;IACD,QAAQ,CAAE,QAAkB;QAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAClD,CAAC;IACD,SAAS,CAAE,QAAkB;QAC3B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;IACnD,CAAC;IACD,kBAAkB,CAAE,QAAkB;QACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IACD,eAAe;QACb,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,IAAI,CAAC;QACpC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;QAChC,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,IAAI,CAAC;QACd,IAAI,CAAC,cAAc,CAAC,UAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;IACpC,CAAC;IACD,cAAc;QACZ,IAAI,CAAC,cAAc,CAAC,QAAQ,GAAG,KAAK,CAAC;QACrC,IAAI,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC;QACjC,IAAI,CAAC,aAAa,CAAC,QAAQ,GAAG,KAAK,CAAC;QACf,IAAI,CAAC,cAAc,CAAC,UAAW,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtE,IAAI,CAAC,WAAW,CAAC,QAAQ,GAAG,IAAI,CAAC;IACnC,CAAC;IACD,gBAAgB,CAAE,KAAc;QAC9B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;IACpE,CAAC;IACD,cAAc,CAAE,IAAY;QAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;QACpE,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IACD,aAAa,CAAE,IAAY;QACzB,MAAM,WAAW,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,0BAA0B,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QAC3C,WAAW,CAAC,WAAW,GAAG,IAAI,CAAC;IACjC,CAAC;IACD,UAAU;QACR,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;IAClC,CAAC;IACD,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC;IAClD,CAAC;IACD,MAAM;QACJ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC;IACH,CAAC;IACD,OAAO;QACL,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IACpC,CAAC;CACF,CAAA;AAtF8B;IAA5B,OAAO,CAAC,kBAAkB,CAAC;8BAAa,iBAAiB;+CAAC;AAC7B;IAA7B,OAAO,CAAC,mBAAmB,CAAC;8BAAc,iBAAiB;gDAAC;AAC5B;IAAhC,OAAO,CAAC,sBAAsB,CAAC;8BAAiB,iBAAiB;mDAAC;AACnC;IAA/B,OAAO,CAAC,qBAAqB,CAAC;8BAAgB,iBAAiB;kDAAC;AACjC;IAA/B,OAAO,CAAC,qBAAqB,CAAC;8BAAgB,WAAW;kDAAC;AAKtB;IAApC,MAAM,CAAC,OAAO,EAAE,kBAAkB,CAAC;;;;2CAEnC;AACqC;IAArC,MAAM,CAAC,OAAO,EAAE,mBAAmB,CAAC;;;;4CAEpC;AACuC;IAAvC,MAAM,CAAC,OAAO,EAAE,qBAAqB,CAAC;;;;8CAEtC;AACyC;IAAzC,MAAM,CAAC,QAAQ,EAAE,sBAAsB,CAAC;;;;gDAGxC;AA9BU,WAAW;IA5BvB,IAAI,CAAC;QACJ,IAAI,EAAE,qBAAqB;QAC3B,QAAQ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;SAwBH;KACR,CAAC;qCAIkC,WAAW;GAHlC,WAAW,CA+FvB;SA/FY,WAAW","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\n\nconst { CompositeDisposable, Emitter, Disposable } = require('atom');\nimport { View, ViewElement, Element, Action } from './View';\nimport { SCHEME_EDITOR_URI } from './SchemeEditorView';\n\nimport { parse } from 'path';\n\n@View({\n  name: 'xatom-debug-toolbar',\n  template: `<div class=\"btn-toolbar\">\n    <div class=\"btn-group\">\n      <button class=\"xatom-debug-run btn\">\n        <i class=\"xatom-icon\" name=\"run\"></i>\n      </button>\n    </div>\n    <div class=\"btn-group\">\n      <button class=\"xatom-debug-stop btn\" disabled=\"true\">\n        <i class=\"xatom-icon\" name=\"stop\"></i>\n      </button>\n    </div>\n    <div class=\"btn-group xatom-debug-scheme-group\">\n      <button class=\"btn btn-separator btn-select\">\n        <select class=\"xatom-debug-project\"></select>\n        <span class=\"arrow\"></span>\n      </button>\n      <button class=\"btn xatom-debug-scheme\"> Select scheme </button>\n    </div>\n    <div class=\"btn-group\">\n      <div class=\"btn xatom-debug-status\" style=\"display:none;\">\n        <i class=\"xatom-icon\" name=\"\"></i>\n        <span class=\"xatom-debug-status-text\"><span>\n      </div>\n    </div>\n  </div>`\n})\nexport class ToolbarView {\n  public emitter = new Emitter();\n  private panel: any;\n  constructor (private viewElement: ViewElement) {\n    this.panel = atom.workspace.addHeaderPanel({\n      item: this.getElement(),\n      visible: true\n    });\n  }\n  @Element('.xatom-debug-run') runElement: HTMLButtonElement;\n  @Element('.xatom-debug-stop') stopElement: HTMLButtonElement;\n  @Element('.xatom-debug-project') projectElement: HTMLSelectElement;\n  @Element('.xatom-debug-scheme') schemeElement: HTMLButtonElement;\n  @Element('.xatom-debug-status') statusElement: HTMLElement;\n  // @ElementAction('change', function changeProject () {\n  //   const selectedProject = this.projectElement['value'];\n  //   console.log('selectedProject', selectedProject)\n  // })\n  @Action('click', '.xatom-debug-run') clickRun () {\n    this.emitter.emit('didClickRun');\n  }\n  @Action('click', '.xatom-debug-stop') clickStop () {\n    this.emitter.emit('didClickStop');\n  }\n  @Action('click', '.xatom-debug-scheme') clickScheme () {\n    atom.workspace.toggle(SCHEME_EDITOR_URI);\n  }\n  @Action('change', '.xatom-debug-project') changeProject () {\n    const selectedProject = this.projectElement['value'];\n    this.emitter.emit('didSelectProject', selectedProject);\n  }\n  setProjects (projects: any[]) {\n    this.projectElement.innerHTML = '';\n    projects.forEach((directory, index) => {\n      const option = document.createElement('option');\n      const name = parse(directory.path).base;\n      option.value = directory.path;\n      option.innerText = name;\n      if (index === 0) {\n        this.emitter.emit('didSelectProject', directory.path);\n      }\n      this.projectElement.appendChild(option);\n    });\n  }\n  onDidRun (callback: Function) {\n    return this.emitter.on('didClickRun', callback);\n  }\n  onDidStop (callback: Function) {\n    return this.emitter.on('didClickStop', callback);\n  }\n  onDidSelectProject (callback: Function) {\n    return this.emitter.on('didSelectProject', callback);\n  }\n  disableControls () {\n    this.projectElement.disabled = true;\n    this.runElement.disabled = true;\n    this.schemeElement.disabled = true;\n    (<HTMLButtonElement> this.projectElement.parentNode).disabled = true;\n    this.stopElement.disabled = false;\n  }\n  enableControls () {\n    this.projectElement.disabled = false;\n    this.runElement.disabled = false;\n    this.schemeElement.disabled = false;\n    (<HTMLButtonElement> this.projectElement.parentNode).disabled = false;\n    this.stopElement.disabled = true;\n  }\n  setStatusLoading (value: boolean) {\n    this.statusElement.classList[value ? 'add' : 'remove']('loading');\n  }\n  setStatusState (type: string) {\n    const iconElement = this.statusElement.querySelector('.xatom-icon');\n    iconElement.setAttribute('name', type);\n  }\n  setStatusText (text: string) {\n    const textElement = this.statusElement.querySelector('.xatom-debug-status-text');\n    this.statusElement.style.display = 'block';\n    textElement.textContent = text;\n  }\n  getElement (): HTMLElement {\n    return this.viewElement.element;\n  }\n  viewDidLoad () {\n    this.setProjects(atom.project.getDirectories());\n  }\n  toggle () {\n    if (this.panel.visible) {\n      this.panel.hide();\n    } else {\n      this.panel.show();\n    }\n  }\n  destroy () {\n    this.viewElement.element.remove();\n  }\n}\n"]}