{"version":3,"file":"Plugin.js","sourceRoot":"","sources":["../src2/Plugin.ts"],"names":[],"mappings":"AAAA,WAAW,CAAC;AACZ;;;;GAIG;AACH,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAM5E,OAAO,EAAW,aAAa,EAAE,MAAM,WAAW,CAAC;AAMnD,MAAM;IAIJ,YACU,WAAwB,EACxB,gBAAkC,EAClC,aAA4B,EAC5B,kBAAsC,EACtC,iBAAoC;QAJpC,gBAAW,GAAX,WAAW,CAAa;QACxB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,kBAAa,GAAb,aAAa,CAAe;QAC5B,uBAAkB,GAAlB,kBAAkB,CAAoB;QACtC,sBAAiB,GAAjB,iBAAiB,CAAmB;QARtC,YAAO,GAAG,IAAI,OAAO,EAAE,CAAC;QAEzB,YAAO,GAAe,EAAE,CAAC;IAMiB,CAAC;IAClD,OAAO,CAAE,YAAoB,EAAE,YAAoB;QACjD,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QACtC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QACnD,CAAC;IACH,CAAC;IACD,eAAe,CAAE,MAAc;QAC7B,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;IAC7B,CAAC;IACD,UAAU;QACR,MAAM,CAAC,aAAa,CAClB,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,kBAAkB,EACvB,IAAI,CAAC,iBAAiB,CACvB,CAAC;IACJ,CAAC;IACD,eAAe;QACb,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IACD,kBAAkB,CAAE,QAAkB;QACpC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;IACvD,CAAC;IACD,SAAS,CAAE,IAAY,EAAE,MAAW;QAClC,MAAM,IAAI,GAAG;YACX,IAAI;YACJ,MAAM;SACP,CAAC;QACF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC;QAC3B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IACD,YAAY,CAAE,UAAkB;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;IACtD,CAAC;IACD,OAAO;IAEP,CAAC;CACF","sourcesContent":["'use babel';\n/*!\n * XAtom Debug\n * Copyright(c) 2017 Williams Medina <williams.medinaa@gmail.com>\n * MIT Licensed\n */\nconst { CompositeDisposable, Range, Emitter, Disposable } = require('atom');\nimport { ToolbarView } from './ToolbarView';\nimport { DebugControlView } from './DebugControlView';\nimport { DebugAreaView, DEBUG_AREA_URI } from './DebugAreaView';\nimport { DebugNavigatorView, DEBUG_NAVIGATOR_URI } from './DebugNavigatorView';\nimport { Breakpoint, BreakpointManager } from './Breakpoint';\nimport { Session, createSession } from './Session';\n\nexport interface Plugin {\n  iconPath: string;\n}\n\nexport class PluginManager {\n  private emitter = new Emitter();\n  private activePlugin: Plugin;\n  public plugins: Array<any> = [];\n  constructor (\n    private toolbarView: ToolbarView,\n    private debugControlView: DebugControlView,\n    private debugAreaView: DebugAreaView,\n    private debugNavigatorView: DebugNavigatorView,\n    private breakpointManager: BreakpointManager) {}\n  execute (functionName: string, functionArgs?: any[]) {\n    const plugin = this.getActivePlugin();\n    if (plugin[functionName]) {\n      plugin[functionName].apply(plugin, functionArgs);\n    }\n  }\n  setActivePlugin (plugin: Plugin): void {\n    this.activePlugin = plugin;\n  }\n  getSession (): Session {\n    return createSession(\n      this.toolbarView,\n      this.debugControlView,\n      this.debugAreaView,\n      this.debugNavigatorView,\n      this.breakpointManager\n    );\n  }\n  getActivePlugin (): Plugin {\n    return this.activePlugin;\n  }\n  onDidChangePlugins (callback: Function) {\n    return this.emitter.on('didChangePlugins', callback);\n  }\n  addPlugin (name: string, plugin: any) {\n    const item = {\n      name,\n      plugin\n    };\n    this.plugins.push(item);\n    this.activePlugin = plugin;\n    this.emitter.emit('didChangePlugins', this.plugins);\n  }\n  removePlugin (pluginName: string) {\n    const index = this.plugins.findIndex((p) => p.name === pluginName);\n    if (index > -1) this.plugins.splice(index, 1);\n    this.emitter.emit('didChangePlugins', this.plugins);\n  }\n  destroy () {\n\n  }\n}\n"]}